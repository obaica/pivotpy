# AUTOGENERATED! DO NOT EDIT! File to edit: Utilities.ipynb (unless otherwise specified).

__all__ = ['interpolate_data', 'ps_to_py', 'ps_to_std']

# Cell
def interpolate_data(x,y,n=10,k=3):
    """
    x: 1D array of size p
    y: ndarray of size p,q,r,....
    n: Number of points to add between two given points.
    k: Polynomial order to interpolate.

    Only axis 0 will be interpolated. If you want general interploation, use
    `from scipy.interpolate import make_interp_spline, BSpline`

    General Usage: K(p),E(p,q) input from bandstructure.
    Knew,Enew= interpolate_data(K,E,n=10,k=3) #cubic interploation
    """
    import numpy as np
    from scipy.interpolate import make_interp_spline, BSpline
    xnew=[np.linspace(x[i],x[i+1],n) for i in range(len(x)-1)]
    xnew=np.reshape(xnew,(-1))
    spl = make_interp_spline(x, y, k=k) #BSpline object
    ynew = spl(xnew)
    return xnew,ynew

# Cell
def ps_to_py(path_to_ps='powershell.exe', exec_type='-Command',ps_command='Get-ChildItem'):
    """
    Captures powershell output in python.
    Parameters:
            path_to_ps: path to powerhell.exe if not added to PATH variables.
            exec_type: type of execution, default '-Command', could be '-File'.
            ps_command: enclose ps_command in ' ' or " ".
    """
    from subprocess import Popen, PIPE
    cmd = [path_to_ps, '-ExecutionPolicy', 'Bypass', exec_type, ps_command]
    proc = Popen(cmd, stdout=PIPE, stderr=PIPE)
    out=[]; #save to out.
    while True:
        line = proc.stdout.readline()
        if line!=b'':
            line=line.strip()
            u_line=line.decode("utf-8")
            out.append(u_line)
        else:
            break
    out=[item for item in out if item!=''] #filter out empty lines
    return out

# Cell
def ps_to_std(path_to_ps='powershell.exe',
                 exec_type='-Command',ps_command='Get-ChildItem'):
    """
    Prints powershell output in python std.
    Parameters:
            path_to_ps: path to powerhell.exe if not added to PATH variables.
            exec_type: type of execution, default '-Command', could be '-File'.
            ps_command: enclose ps_command in ' ' or " ".
    """
    out=ps_to_py(path_to_ps=path_to_ps,exec_type=exec_type,ps_command=ps_command)
    for item in out:
        print(item)
    return None